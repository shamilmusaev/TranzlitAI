// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Firefox –∏ Chrome
const browserAPI = typeof browser !== 'undefined' ? browser : chrome;

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const tabButtons = document.querySelectorAll('.tab-button');
const tabPanes = document.querySelectorAll('.tab-pane');
const deepseekApiKey = document.getElementById('deepseekApiKey');
const openrouterApiKey = document.getElementById('openrouterApiKey');
const chatgptApiKey = document.getElementById('chatgptApiKey');
const saveDeepseekKey = document.getElementById('saveDeepseekKey');
const saveOpenrouterKey = document.getElementById('saveOpenrouterKey');
const saveChatgptKey = document.getElementById('saveChatgptKey');
const deepseekStatus = document.getElementById('deepseekStatus');
const openrouterStatus = document.getElementById('openrouterStatus');
const chatgptStatus = document.getElementById('chatgptStatus');
const defaultProviderRadios = document.getElementsByName('defaultProvider');
const defaultModel = document.getElementById('defaultModel');
const defaultTargetLanguage = document.getElementById('defaultTargetLanguage');
const clearLogs = document.getElementById('clearLogs');
const copyLogs = document.getElementById('copyLogs');
const logLevels = document.querySelectorAll('.log-level');
const logContent = document.getElementById('logContent');

// –≠–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const encryptionStatus = document.getElementById('encryptionStatus');
const encryptionIcon = document.getElementById('encryptionIcon');
const masterPassword = document.getElementById('masterPassword');
const strengthBar = document.getElementById('strengthBar');
const strengthText = document.getElementById('strengthText');
const enableEncryption = document.getElementById('enableEncryption');
const disableEncryption = document.getElementById('disableEncryption');

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async () => {
    const settings = await browserAPI.storage.local.get([
        'deepseekApiKey',
        'openrouterApiKey',
        'chatgptApiKey',
        'defaultProvider',
        'defaultModel',
        'defaultTargetLanguage'
    ]);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è API –∫–ª—é—á–µ–π
    if (settings.deepseekApiKey) {
        deepseekApiKey.value = settings.deepseekApiKey;
    }
    if (settings.openrouterApiKey) {
        openrouterApiKey.value = settings.openrouterApiKey;
    }
    if (settings.chatgptApiKey) {
        chatgptApiKey.value = settings.chatgptApiKey;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (settings.defaultProvider) {
        const radio = document.querySelector(`input[name="defaultProvider"][value="${settings.defaultProvider}"]`);
        if (radio) radio.checked = true;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (settings.defaultModel) {
        defaultModel.value = settings.defaultModel;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (settings.defaultTargetLanguage) {
        defaultTargetLanguage.value = settings.defaultTargetLanguage;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏
    loadLogs();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    await loadEncryptionStatus();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª–∞–¥–æ–∫
tabButtons.forEach(button => {
    button.addEventListener('click', () => {
        const tabId = button.dataset.tab;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∫–Ω–æ–ø–æ–∫
        tabButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∫–ª–∞–¥–∫—É
        tabPanes.forEach(pane => {
            pane.classList.remove('active');
            if (pane.id === tabId) {
                pane.classList.add('active');
            }
        });
    });
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–µ–π
saveDeepseekKey.addEventListener('click', async () => {
    const key = deepseekApiKey.value.trim();
    if (!key) {
        deepseekStatus.textContent = '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á';
        deepseekStatus.className = 'status error';
        return;
    }

    try {
        await browserAPI.storage.local.set({ deepseekApiKey: key });
        deepseekStatus.textContent = 'API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω';
        deepseekStatus.className = 'status success';
    } catch (error) {
        deepseekStatus.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞';
        deepseekStatus.className = 'status error';
    }
});

saveOpenrouterKey.addEventListener('click', async () => {
    const key = openrouterApiKey.value.trim();
    if (!key) {
        openrouterStatus.textContent = '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á';
        openrouterStatus.className = 'status error';
        return;
    }

    try {
        await browserAPI.storage.local.set({ openrouterApiKey: key });
        openrouterStatus.textContent = 'API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω';
        openrouterStatus.className = 'status success';
    } catch (error) {
        openrouterStatus.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞';
        openrouterStatus.className = 'status error';
    }
});

saveChatgptKey.addEventListener('click', async () => {
    const key = chatgptApiKey.value.trim();
    if (!key) {
        chatgptStatus.textContent = '–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á';
        chatgptStatus.className = 'status error';
        return;
    }

    try {
        await browserAPI.storage.local.set({ chatgptApiKey: key });
        chatgptStatus.textContent = 'API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω';
        chatgptStatus.className = 'status success';
    } catch (error) {
        chatgptStatus.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞';
        chatgptStatus.className = 'status error';
    }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
defaultProviderRadios.forEach(radio => {
    radio.addEventListener('change', async (e) => {
        await browserAPI.storage.local.set({ defaultProvider: e.target.value });
    });
});

defaultModel.addEventListener('change', async () => {
    await browserAPI.storage.local.set({ defaultModel: defaultModel.value });
});

defaultTargetLanguage.addEventListener('change', async () => {
    await browserAPI.storage.local.set({ defaultTargetLanguage: defaultTargetLanguage.value });
});

// –†–∞–±–æ—Ç–∞ —Å –ª–æ–≥–∞–º–∏
async function loadLogs() {
    try {
        const result = await browserAPI.storage.local.get('logs');
        const logs = result.logs || [];
        
        const enabledLevels = Array.from(logLevels)
            .filter(checkbox => checkbox.checked)
            .map(checkbox => checkbox.value);

        const filteredLogs = logs.filter(log => enabledLevels.includes(log.level));
        const formattedLogs = filteredLogs.map(log => 
            `[${log.timestamp}] [${log.level}] ${log.message}${log.data ? '\n' + JSON.stringify(log.data, null, 2) : ''}`
        ).join('\n\n');

        logContent.textContent = formattedLogs || '–ù–µ—Ç –ª–æ–≥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è';
    } catch (error) {
        console.error('Error loading logs:', error);
        logContent.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤: ' + error.message;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª–æ–≥–æ–≤
clearLogs.addEventListener('click', async () => {
    try {
        await browserAPI.storage.local.set({ logs: [] });
        loadLogs();
    } catch (error) {
        console.error('Error clearing logs:', error);
    }
});

copyLogs.addEventListener('click', () => {
    const text = logContent.textContent;
    navigator.clipboard.writeText(text).then(() => {
        const originalText = copyLogs.textContent;
        copyLogs.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
        setTimeout(() => {
            copyLogs.textContent = originalText;
        }, 2000);
    });
});

logLevels.forEach(checkbox => {
    checkbox.addEventListener('change', loadLogs);
});

// –§—É–Ω–∫—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
async function loadEncryptionStatus() {
    try {
        const isEnabled = await securityManager.isEncryptionEnabled();
        updateEncryptionStatus(isEnabled);
    } catch (error) {
        console.error('Error loading encryption status:', error);
        encryptionStatus.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞';
        encryptionIcon.textContent = '‚ùå';
    }
}

function updateEncryptionStatus(isEnabled) {
    if (isEnabled) {
        encryptionStatus.textContent = '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ';
        encryptionIcon.textContent = 'üîí';
        enableEncryption.disabled = true;
        disableEncryption.disabled = false;
    } else {
        encryptionStatus.textContent = '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ';
        encryptionIcon.textContent = 'üîì';
        enableEncryption.disabled = false;
        disableEncryption.disabled = true;
    }
}

function checkPasswordStrength(password) {
    let strength = 0;
    let feedback = [];

    if (password.length >= 8) strength += 1;
    else feedback.push('–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤');

    if (/[a-z]/.test(password)) strength += 1;
    else feedback.push('—Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã');

    if (/[A-Z]/.test(password)) strength += 1;
    else feedback.push('–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã');

    if (/[0-9]/.test(password)) strength += 1;
    else feedback.push('—Ü–∏—Ñ—Ä—ã');

    if (/[^A-Za-z0-9]/.test(password)) strength += 1;
    else feedback.push('—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã');

    const levels = ['', 'weak', 'fair', 'good', 'strong'];
    const texts = ['', '–°–ª–∞–±—ã–π', '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', '–•–æ—Ä–æ—à–∏–π', '–°–∏–ª—å–Ω—ã–π'];
    
    return {
        level: levels[strength],
        text: texts[strength],
        feedback: feedback
    };
}

function updatePasswordStrength() {
    const password = masterPassword.value;
    const strength = checkPasswordStrength(password);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–∏–ª—ã
    strengthBar.className = `strength-bar ${strength.level}`;
    
    if (password.length === 0) {
        strengthText.textContent = '';
        enableEncryption.disabled = true;
        disableEncryption.disabled = true;
    } else {
        strengthText.textContent = `${strength.text}${strength.feedback.length > 0 ? ` (–Ω—É–∂–Ω–æ: ${strength.feedback.join(', ')})` : ''}`;
        
        // –ö–Ω–æ–ø–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–ª—å–Ω–æ–º –ø–∞—Ä–æ–ª–µ
        const isEnabled = securityManager && 
            encryptionStatus.textContent.includes('–≤–∫–ª—é—á–µ–Ω–æ');
        const isStrongEnough = strength.level === 'good' || strength.level === 'strong';
        
        enableEncryption.disabled = isEnabled || !isStrongEnough;
        disableEncryption.disabled = !isEnabled || password.length < 1;
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
masterPassword.addEventListener('input', updatePasswordStrength);

enableEncryption.addEventListener('click', async () => {
    const password = masterPassword.value;
    if (!password) {
        alert('–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å');
        return;
    }

    try {
        enableEncryption.disabled = true;
        enableEncryption.textContent = 'üîÑ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ...';
        
        await securityManager.enableEncryption(password);
        
        updateEncryptionStatus(true);
        masterPassword.value = '';
        updatePasswordStrength();
        
        alert('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ!\n–í–∞—à–∏ API –∫–ª—é—á–∏ —Ç–µ–ø–µ—Ä—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.');
        
    } catch (error) {
        console.error('Encryption error:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
        enableEncryption.disabled = false;
    } finally {
        enableEncryption.textContent = 'üîê –í–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ';
    }
});

disableEncryption.addEventListener('click', async () => {
    const password = masterPassword.value;
    if (!password) {
        alert('–í–≤–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ –∫–ª—é—á–µ–π');
        return;
    }

    const confirmed = confirm(
        '‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ?\n\n' +
        'API –∫–ª—é—á–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ.'
    );
    
    if (!confirmed) return;

    try {
        disableEncryption.disabled = true;
        disableEncryption.textContent = 'üîÑ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞...';
        
        await securityManager.disableEncryption(password);
        
        updateEncryptionStatus(false);
        masterPassword.value = '';
        updatePasswordStrength();
        
        alert('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\nAPI –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ.');
        
    } catch (error) {
        console.error('Decryption error:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ' + error.message);
        disableEncryption.disabled = false;
    } finally {
        disableEncryption.textContent = 'üîì –û—Ç–∫–ª—é—á–∏—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ';
    }
});

// –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏–ª—ã –ø–∞—Ä–æ–ª—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', () => {
    updatePasswordStrength();
}); 