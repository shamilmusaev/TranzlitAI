// –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π
class SecurityManager {
    constructor() {
        this.keyDerivationIterations = 100000;
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async deriveKey(password) {
        const encoder = new TextEncoder();
        const keyMaterial = await crypto.subtle.importKey(
            'raw',
            encoder.encode(password),
            { name: 'PBKDF2' },
            false,
            ['deriveKey']
        );

        return await crypto.subtle.deriveKey(
            {
                name: 'PBKDF2',
                salt: encoder.encode('tranzlit-salt-v1'), // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Å–æ–ª—å
                iterations: this.keyDerivationIterations,
                hash: 'SHA-256'
            },
            keyMaterial,
            { name: 'AES-GCM', length: 256 },
            false,
            ['encrypt', 'decrypt']
        );
    }

    // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async encrypt(plaintext, password) {
        try {
            const encoder = new TextEncoder();
            const key = await this.deriveKey(password);
            const iv = crypto.getRandomValues(new Uint8Array(12));
            
            const encrypted = await crypto.subtle.encrypt(
                { name: 'AES-GCM', iv: iv },
                key,
                encoder.encode(plaintext)
            );

            // –û–±—ä–µ–¥–∏–Ω—è–µ–º IV –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const result = new Uint8Array(iv.length + encrypted.byteLength);
            result.set(iv);
            result.set(new Uint8Array(encrypted), iv.length);
            
            return btoa(String.fromCharCode.apply(null, result));
        } catch (error) {
            console.error('Encryption failed:', error);
            throw error;
        }
    }

    // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async decrypt(encryptedData, password) {
        try {
            const decoder = new TextDecoder();
            const key = await this.deriveKey(password);
            
            const data = new Uint8Array(atob(encryptedData).split('').map(char => char.charCodeAt(0)));
            const iv = data.slice(0, 12);
            const encrypted = data.slice(12);

            const decrypted = await crypto.subtle.decrypt(
                { name: 'AES-GCM', iv: iv },
                key,
                encrypted
            );

            return decoder.decode(decrypted);
        } catch (error) {
            console.error('Decryption failed:', error);
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    async isEncryptionEnabled() {
        const settings = await browserAPI.storage.local.get('encryptionEnabled');
        return settings.encryptionEnabled === true;
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ API –∫–ª—é—á–∞
    async saveSecureApiKey(keyName, apiKey, masterPassword = null) {
        try {
            if (masterPassword && await this.isEncryptionEnabled()) {
                const encryptedKey = await this.encrypt(apiKey, masterPassword);
                await browserAPI.storage.local.set({ 
                    [keyName]: encryptedKey,
                    [`${keyName}_encrypted`]: true 
                });
                console.log(`‚úÖ API –∫–ª—é—á ${keyName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º`);
            } else {
                await browserAPI.storage.local.set({ 
                    [keyName]: apiKey,
                    [`${keyName}_encrypted`]: false 
                });
                console.log(`‚ö†Ô∏è API –∫–ª—é—á ${keyName} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ë–ï–ó —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è`);
            }
        } catch (error) {
            console.error('Failed to save API key:', error);
            throw error;
        }
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–∞
    async getSecureApiKey(keyName, masterPassword = null) {
        try {
            const result = await browserAPI.storage.local.get([keyName, `${keyName}_encrypted`]);
            const apiKey = result[keyName];
            const isEncrypted = result[`${keyName}_encrypted`];

            if (!apiKey) {
                return null;
            }

            if (isEncrypted && masterPassword) {
                return await this.decrypt(apiKey, masterPassword);
            } else if (isEncrypted && !masterPassword) {
                throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Å—Ç–µ—Ä-–ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏');
            }

            return apiKey;
        } catch (error) {
            console.error('Failed to get API key:', error);
            throw error;
        }
    }

    // –í–∫–ª—é—á–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–µ–π
    async enableEncryption(masterPassword) {
        try {
            const keyNames = ['deepseekApiKey', 'openrouterApiKey', 'chatgptApiKey'];
            
            for (const keyName of keyNames) {
                const result = await browserAPI.storage.local.get([keyName, `${keyName}_encrypted`]);
                const apiKey = result[keyName];
                const isEncrypted = result[`${keyName}_encrypted`];

                if (apiKey && !isEncrypted) {
                    console.log(`üîê –®–∏—Ñ—Ä—É—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á: ${keyName}`);
                    await this.saveSecureApiKey(keyName, apiKey, masterPassword);
                }
            }

            await browserAPI.storage.local.set({ encryptionEnabled: true });
            console.log('‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π');
        } catch (error) {
            console.error('Failed to enable encryption:', error);
            throw error;
        }
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    async disableEncryption(masterPassword) {
        try {
            const keyNames = ['deepseekApiKey', 'openrouterApiKey', 'chatgptApiKey'];
            
            for (const keyName of keyNames) {
                const result = await browserAPI.storage.local.get([keyName, `${keyName}_encrypted`]);
                const apiKey = result[keyName];
                const isEncrypted = result[`${keyName}_encrypted`];

                if (apiKey && isEncrypted) {
                    console.log(`üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∫–ª—é—á: ${keyName}`);
                    const decryptedKey = await this.decrypt(apiKey, masterPassword);
                    await this.saveSecureApiKey(keyName, decryptedKey, null);
                    await browserAPI.storage.local.remove(`${keyName}_encrypted`);
                }
            }

            await browserAPI.storage.local.set({ encryptionEnabled: false });
            console.log('‚ö†Ô∏è –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ - –∫–ª—é—á–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ');
        } catch (error) {
            console.error('Failed to disable encryption:', error);
            throw error;
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const securityManager = new SecurityManager(); 